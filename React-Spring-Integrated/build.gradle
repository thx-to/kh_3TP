plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.kh'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://artifacts.elastic.co/maven' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket' // websocket
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6' // jwt
	implementation 'org.springframework.boot:spring-boot-starter-security' // Spring Security
	implementation 'com.opencsv:opencsv:5.7.1' // csv 관련 dependency
	implementation 'com.fasterxml.jackson.core:jackson-databind' // flask dependency
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.0' // Swagger
	implementation 'org.springframework.boot:spring-boot-starter-validation' //
	compileOnly 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok' // test 환경 lombok 적용
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6' // jwt
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6' // JSON 처리 라이브러리
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok' // test 환경 lombok 적용
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'		// 구글 OAuth2 로그인 기능을 사용
	implementation 'org.springframework.security:spring-security-oauth2-jose:5.5.0'
	implementation 'org.springframework.security:spring-security-oauth2-core:5.5.0'

	implementation 'io.github.cdimascio:dotenv-java:3.0.0'    // Spring Boot는 기본적으로 ...env 파일을 로드하기 위함

	// 이메일 인증
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// hibernate 추가 JSON 타입 필드 사용
	implementation 'org.hibernate.orm:hibernate-core:6.6.4.Final'
	implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'

	// 스프링부트 JPA Json 타입 정렬 관련
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'com.google.firebase:firebase-admin:9.4.3' // firebase
	implementation 'com.google.protobuf:protobuf-java:3.21.12'

	// 엘라스틱 서치 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'co.elastic.clients:elasticsearch-java:8.17.2'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
	implementation 'jakarta.json:jakarta.json-api:2.1.3'
}

tasks.named('test') {
	useJUnitPlatform()
}

// build 시점에 테스트 수행 X
tasks.test {
	enabled= false
}

def reactDir = "$projectDir/src/main/react" // 리액트 디렉토리

sourceSets { // 리액트 디렉토리를 리소스 디렉토리로 설정
	main {
		resources {
			srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" } // 리액트 빌드 파일들을 복사해준다.

task installReact(type: Exec) { // 리액트 설치
	workingDir "$reactDir"
	inputs.dir "$reactDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) { // 윈도우일 경우
		commandLine "yarn.cmd", "audit", "fix"
		commandLine 'yarn.cmd', 'install'
	} else { // 윈도우가 아닐 경우
		commandLine "yarn", "audit", "fix"
		commandLine 'yarn', 'install'
	}
}

task buildReact(type: Exec) { // 리액트 빌드
	dependsOn "installReact" // 리액트 설치가 끝나야 빌드를 할 수 있도록 설정
	workingDir "$reactDir" // 리액트 디렉토리에서 실행
	inputs.dir "$reactDir" // 리액트 디렉토리를 입력으로 받음
	group = BasePlugin.BUILD_GROUP // 그룹 설정
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "yarn.cmd", "run", "build"
	} else {
		commandLine "yarn", "run", "build"
	}
}

task copyReactBuildFiles(type: Copy) { // 리액트 빌드 파일들을 복사해준다.
	dependsOn "buildReact" // 리액트 빌드가 끝나야 복사를 할 수 있도록 설정
	from "$reactDir/build" // 리액트 빌드 디렉토리에서
	into "$projectDir/src/main/resources/static" // 스프링 리소스 디렉토리로
}

jar { // jar 파일에 리액트 빌드 파일들을 포함시킨다.
	enabled = false // 기본 jar 파일 생성을 끈다.
}